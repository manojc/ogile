{"version":3,"sources":["webpack:///./src/app/organisation/create-organisation/create-organisation.component.css","webpack:///./src/app/organisation/create-organisation/create-organisation.component.html","webpack:///./src/app/organisation/create-organisation/create-organisation.component.ts","webpack:///./src/app/organisation/organisation.module.ts","webpack:///./src/app/organisation/organisation.routes.ts","webpack:///./src/app/organisation/resolvers/organisation.resolver.ts","webpack:///./src/app/shared/models/organisation.model.ts"],"names":[],"mappings":"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","file":"organisation-organisation-module.js","sourcesContent":["module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid mtxl\\\">\\n    <mat-card class=\\\"col-lg-offset-3 col-lg-6 col-md-offset-2 col-md-8 col-sm-offset-1 col-sm-10 col-xs-12\\\">\\n        <form [formGroup]=\\\"form\\\">\\n            <div class=\\\"row\\\">\\n                <mat-form-field class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\n                    <input matInput placeholder=\\\"Organisation Name\\\" formControlName=\\\"name\\\" [readonly]=\\\"!!isReadOnly\\\">\\n                    <mat-error *ngIf=\\\"form?.controls?.name?.hasError('required')\\\">\\n                        Organisation name is required!\\n                    </mat-error>\\n                </mat-form-field>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <mat-form-field class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\n                    <textarea matInput placeholder=\\\"Description\\\" formControlName=\\\"description\\\" rows=\\\"10\\\" [readonly]=\\\"!!isReadOnly\\\"></textarea>\\n                    <mat-error *ngIf=\\\"form?.controls?.name?.hasError('required')\\\">\\n                        Organisation description is required!\\n                    </mat-error>\\n                </mat-form-field>\\n            </div>\\n            <div class=\\\"row mtl\\\">\\n                <button mat-raised-button color=\\\"primary\\\" class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\" (click)=\\\"create()\\\">\\n                    Create Organisation\\n                </button>\\n            </div>\\n        </form>\\n    </mat-card>\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { FormGroup } from \"@angular/forms\";\nimport { HttpInterceptorService } from \"../../shared/services/http-interceptor/http-interceptor.service\";\nimport { API_URL } from \"../../shared/models/api.url.model\";\nimport { Organisation } from \"../../shared/models/organisation.model\";\nimport { StorageService } from \"../../shared/services/storage/storage.service\";\nimport { EventsService, GLOBAL_EVENTS } from \"../../shared/services/events.service/events.service\";\nimport { User } from \"../../shared/models/user.model\";\n\n@Component({\n\tselector: \"app-create-organisation\",\n\ttemplateUrl: \"./create-organisation.component.html\",\n\tstyleUrls: [\"./create-organisation.component.css\"]\n})\nexport class CreateOrganisationComponent implements OnInit {\n\n\tpublic form: FormGroup;\n\tpublic organisation: Organisation;\n\tpublic user: User;\n\tpublic isReadOnly: boolean = true;\n\n\tpublic constructor(private _Http: HttpInterceptorService,\n\t\tprivate _Router: Router,\n\t\tprivate _route: ActivatedRoute,\n\t\tprivate _StorageService: StorageService,\n\t\tprivate _EventsService: EventsService, ) { }\n\n\tpublic ngOnInit(): void {\n\t\tthis.user = this._StorageService.getItem(\"user\", \"local\") as User;\n\t\tthis.organisation = this._route.snapshot.data.organisation || null;\n\t\tthis.isReadOnly = this.user && this.user.organisationIds && this.user.organisationIds.length &&\n\t\t\tthis.organisation && this.organisation._id &&\n\t\t\tthis.user.organisationIds.indexOf(this.organisation._id) <= -1;\n\t\tconsole.log(this.isReadOnly);\n\t\tthis.form = Organisation.createForm;\n\t\tif (this.organisation) {\n\t\t\tOrganisation.setForm(this.form, this.organisation);\n\t\t}\n\t}\n\n\tpublic async create(): Promise<any> {\n\t\tif (this.form.valid && this.form.dirty && this.form.touched) {\n\t\t\ttry {\n\t\t\t\tlet request = this.form.value;\n\t\t\t\trequest.adminId = this.user._id;\n\t\t\t\trequest.userIds = request.userIds || [];\n\t\t\t\tif (request.userIds.indexOf(this.user._id) <= -1) {\n\t\t\t\t\trequest.userIds.push(this.user._id);\n\t\t\t\t}\n\t\t\t\tconst httpResponse = this._Http.post(API_URL.CREATE_ORGANISATION, request);\n\t\t\t\tconst organisation: Organisation = await this._Http.toModel(httpResponse);\n\t\t\t\tif (organisation && organisation._id) {\n\t\t\t\t\tthis._StorageService.setKey(\"user\", \"organisationId\", organisation._id, \"local\");\n\t\t\t\t\tthis._StorageService.setKey(\"user\", \"isAdmin\", true, \"local\");\n\t\t\t\t\tthis._EventsService.broadcast(GLOBAL_EVENTS.SET_ORGANISATION);\n\t\t\t\t\tthis._Router.navigate([\"/\"]);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","// angular modules\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from \"@angular/core\";\nimport { HttpModule } from \"@angular/http\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\n\n// external modules\nimport { SharedModule } from \"../shared/shared.module\";\n\n// components\nimport { CreateOrganisationComponent } from \"./create-organisation/create-organisation.component\";\n\n// services\nimport { OrganisationResolver } from \"./resolvers/organisation.resolver\";\n\n// routes (always last)\nimport { Routes } from \"./organisation.routes\";\n\n@NgModule({\n    imports: [\n        ReactiveFormsModule,\n        HttpModule,\n        SharedModule,\n        RouterModule.forChild(Routes) //always last\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\n    declarations: [\n        CreateOrganisationComponent\n    ],\n    providers: [OrganisationResolver],\n    bootstrap: [CreateOrganisationComponent]\n})\nexport class OrganisationModule { }","import { Route } from \"@angular/router\";\nimport { AuthGuardService } from \"../shared/services/auth-guard/auth-guard.service\";\nimport { CreateOrganisationComponent } from \"./create-organisation/create-organisation.component\";\nimport { OrganisationResolver } from \"./resolvers/organisation.resolver\";\n\nexport let Routes: Array<Route> = [\n    {\n        path: \"\",\n        redirectTo: \"/list\",\n        pathMatch: \"full\"\n    },\n    {\n        path: \"list\",\n        component: CreateOrganisationComponent,\n        canActivate: [AuthGuardService]\n    },\n    {\n        path: \"create\",\n        component: CreateOrganisationComponent,\n        canActivate: [AuthGuardService]\n    },\n    {\n        path: \":organisationId\",\n        component: CreateOrganisationComponent,\n        resolve: {\n            organisation: OrganisationResolver\n        },\n        canActivate: [AuthGuardService]\n    }\n];","import { Injectable } from \"@angular/core\";\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from \"@angular/router\";\nimport { HttpInterceptorService } from \"../../shared/services/http-interceptor/http-interceptor.service\";\nimport { Organisation } from \"../../shared/models/organisation.model\";\nimport { User } from \"../../shared/models/user.model\";\nimport { API_URL } from \"../../shared/models/api.url.model\";\n\n@Injectable()\nexport class OrganisationResolver implements Resolve<Organisation> {\n\n    constructor(private _Http: HttpInterceptorService) { }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<Organisation> {\n        const url = API_URL.GET_ORGANISATION.replace(\"${organisationId}\", route.params.organisationId);\n        const httpResponse = this._Http.get(url);\n        return this._Http.toModel(httpResponse);\n    }\n}","import { FormGroup, FormControl, Validators } from \"@angular/forms\";\n\nexport class Organisation {\n    public _id?: string;\n    public adminId: string;\n    public userIds: Array<string>;\n    public name: string;\n    public description: string;\n\n    public static get createForm(): FormGroup {\n        return new FormGroup({\n            name: new FormControl(\"\", [\n                Validators.required\n            ]),\n            description: new FormControl(\"\", [\n                Validators.required\n            ])\n        });\n    }\n\n    public static setForm(form: FormGroup, organisation: Organisation): void {\n        form.setValue({\n            name: organisation.name,\n            description: organisation.description\n        });\n    }\n}"],"sourceRoot":""}